When designing software systems that represent hierarchical relationships a tree structure would be the most often model used. The doctor reporting structure is a great example. One lead physician supervises others who in turn supervise many more doctors. This naturally forms the tree and the branches. Unlike a flat list a tree preserves the chain of command and the branches that represent supervision. It allows efficient traversal, insertion, and querying of relationships without the issue of duplicating data or losing context. Now a software engineer would use a preorder traversal when it is needed to process supervisors before the subordinates. Then an inorder is used for search trees in the doctor structure; it can be used to produce an ordered listing of reports that balances left and right subtrees. Then at last a postorder traversal is used when the subordinates are needed to be processed before their supervisors. This is common to cleanup resolution tasks. In contrast the emergency intake system works completely differently by having a different problem, how to prioritize under time pressure. Here a min-heap is the best structure to use here as patients that are inserted are given an “urgency” score. This score is used to put the patient at the root which makes it the most urgent then it will use insert and remove_min in logarithmic time to ensure as the queue grows it will identify and serve the next patient